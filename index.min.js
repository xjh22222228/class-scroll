const t="scroll";function s(t){t=t||[],this.targets=t.map((t=>({...t,_classNames:t.className.split(/\s/).filter(Boolean)}))),this.observers=[]}function e(){this.observers.forEach((t=>{t.disconnect()}))}s.prototype.init=function(){for(let s=0;s<this.targets.length;s++){const e=this.targets[s],o={root:e.root,rootmargin:e.rootmargin,threshold:e.threshold},r=new IntersectionObserver((s=>{const o=s[0].target,a=o.dataset[t];s[0].intersectionRatio<=0?a&&(!1===e.forwards?e._classNames.forEach((t=>{o.classList.remove(t)})):r.disconnect()):(null==a&&(o.dataset[t]="true"),e._classNames.forEach((t=>{e.delay?setTimeout((()=>{o.classList.add(t)}),e.delay):o.classList.add(t)})))}),o),a="object"==typeof e.el?e.el:document.querySelector(e.el);a&&(r.observe(a),this.observers.push(r))}},s.prototype.destroy=e,s.prototype.disconnect=e;export{s as default};
